# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.plugins import secrets, util

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

#make a directory for the build 
#clone the openWRT source into the directory
#clone the komodo.git into the source/package directory
#git checkout 4.x firmware
#link version file to source folder
#./scripts/feeds update -a
#./scripts/feeds install -a
#c['secretsProviders'] = [secrets.SecretInAFile(dirname="~/Desktop/DELETE")]

factory = util.BuildFactory()
#factory.addStep(steps.ShellCommand(command=["ssh-keyscan", "-H", "github.com", ">>", "~/.ssh/known_hosts"]))

# creates base directory
factory.addStep(steps.ShellCommand(command=["mkdir", "b1300"]))
# check out openwrt
factory.addStep(steps.Git(repourl='https://github.com/openwrt/openwrt.git', mode='incremental', workdir='b1300/source'))
# clones down komodo files
#factory.addStep(steps.ShellCommand(command=["git", "remote", "set-url", "origin", "https://github.com/Komodowifi/komodo"]))
#factory.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:Komodowifi/komodo.git"], workdir='b1300/source/package/komodo'))

#factory.addStep(steps.Git(repourl='git@github.com:Komodowifi/komodo.git', mode='incremental', workdir='b1300/source/package/komodo', sshPrivateKey='MIIEogIBAAKCAQEAp7wZS2i61ggitbRTvuhJiMw6uobOa4e1Z+N2o7XVsGbcLZlIIsAXzZ1CFpgu+ZIGLYqFvJbCOxKB7nBFjpkDeSzT+RYDgoysPCdwCIq6DfKJTWvPbFP1O0ZR5t8aOiD9Q2H6q4e4NwZD78al8ueNGfaohdFbBuJWLgC8Vix7EbQ1qnPHn9sACZ+kB6d339X+QmUt1IxUda03ISKYJX8L7FK4mPIMH73HgFO5MzCfrBOvT+8O5SZUgnVKDb6MQEY60OsUbHYBhBKAP6nmyslBTTpOIhS15NLos3rho35GJVei647jAvey4MMcnRxI9lj4sytP6V8B5IO0zsX4Yqcu2wIDAQABAoIBAAK7GkJTCy+u5DnHHNHv4Dqc8JvW1AeGJxrw5h6WOEtt8UnAxB7kt75+P/Q0OBeSHA2jwremULU7gOgL5eYDcb4IT88vX5FBjxBPqBBLienuN/QNvEvMNiLn6y9yFHA710PAlZ8zT3l93Z9KwarpwC9bB7VeCjhbeQG4u1g/0yUfnjwijci6T4WDVGw1FBo5gOORFaS7BTiGDmzqqdN78S+62WvgV2w3/6plhwWB8AqZxT1z7HgUhBovTauMuowqxLf03OJWqIlRt/g/4NZywxWFnuQZsHmh6sAys2fo6WdH8nnVqhO1sY1kayRZ8fFqCZfOA8uDBrYgvhdbJQMe2ekCgYEA1IaFoXIIbOldESrXYEKOYlt7ogpMuLG8GD0dnUM8/sMB5qHIstm8c14W2UpuVQCHkoN1GcgksRBIj7yqeHn8jX9rYPdF76B2lZ94xRLNu4CNMY1mRHXyZPTG/CxISKqIu+NYzMIVH1ZTVpQNFjbXB4UIBdaiJBJ7FQQxSDW4GyUCgYEAygv9Cz1lG+zzp14DHzggO+pHEP4nJdTo+bVz4xiJY1+HugnuvDpjPuztmVzkeCBvmYGUm57PNd8+RvKxNG3rafclxHGy2+lOWfVm2p9dw6HM7C7QX9dj5s5t7uqJ44WFTcW36FaIiqSYbsIFSmoZVUROF5AFgpypUkWbE+u1Af8CgYBh6tTYzIRLQb3KchWnWSLm+EVfJCWzFtiVxlrFoTwSGODgVPv2Q1GLSfd3B88LxOGxxHWIemlFVz5HU2KrfXC59NIRa/xB6omYaFApZH97e0ASa5aJxln237xqZTCsoj27a4T3WhiHRqvBAReCe6PY6BcJMZmkywsAZN0b6vw3LQKBgDkeIH/v8EhvuQXEhv9pX3twpHyCTNDeGqqVCFjX0+ca14TZT/s4Slw8oIKthw0KpmHwBvHjeFKTdMibzUq0FEwViUC6n8SZdQPrYxNE4D3w3LycE140xtI141AaT7bZRTESRwZQiDMhitIs2VALJHQ9ZhI1LcmZvig68zczeC1DAoGAIkrpmPoa1vYoAHRiKlcH/JVhjig6bbgERGQOJBTAINVFgRJqHNk7xlI0IfNZg34QYwL5qytLNHkODU5PX6HjG2/iNTdQlxSxU59QVLKGZZVY3NtvoIWzVFHgZTO5b88b1NIoXzxq3PmCrL3LPftI1THR16rLka3I3D9X5sIL5wI=', sshHostKey='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnvBlLaLrWCCK1tFO+6EmIzDq6hs5rh7Vn43ajtdWwZtwtmUgiwBfNnUIWmC75kgYtioW8lsI7EoHucEWOmQN5LNP5FgOCjKw8J3AIiroN8olNa89sU/U7RlHm3xo6IP1DYfqrh7g3BkPvxqXy540Z9qiF0VsG4lYuALxWLHsRtDWqc8ef2wAJn6QHp3ff1f5CZS3UjFR1rTchIpglfwvsUriY8gwfvceAU7kzMJ+sE69P7w7lJlSCdUoNvoxARjrQ6xRsdgGEEoA/qebKyUFNOk4iFLXk0uizeuGjfkYlV6LrjuMC97LgwxydHEj2WPizK0/pXwHkg7TOxfhipy7b'))
#factory.addStep(steps.Git(repourl=' https://nichols-kmd:toos1ple@github.com/Komodowifi/komodo', mode='incremental', workdir='b1300/source/package/komodo'))
#!!factory.addStep(steps.ShellCommand(command=["git", "clone", "https://nichols-kmd:toos1ple@github.com/Komodowifi/komodo"], workdir='b1300/source/package/komodo'))


# git checkout
#!!factory.addStep(steps.ShellCommand(command=["git", "checkout", "4.x-firmware"], workdir='b1300/source/package/komodo'))
#create a link
#!!factory.addStep(steps.ShellCommand(command=["ln", "-s", "package/komodo/data/scripts/version", "version"], workdir='b1300/source/'))
#scripts things? i'm not sure what they do
#!!factory.addStep(steps.ShellCommand(command=["./scripts/feeds", "update", "-a"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["./scripts/feeds", "install", "-a"], workdir='b1300/source/'))


#patch
#!!factory.addStep(steps.ShellCommand(command=["patch", "-p1", "--dry-run", "<", "./package/komodo/data/patches/package-base-files.patch"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["patch", "-p1", "<", "./package/komodo/data/patches/package-base-files.patch"], workdir='b1300/source/'))


#!!factory.addStep(steps.ShellCommand(command=["rm", "package/base-files/files/etc/banner"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["rm", "package/base-files/files/etc/shadow"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["rm", "package/base-files/files/etc/passwd"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["rm", "package/base-files/files/etc/rc.local"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["rm", "package/base-files/files/etc/profile"], workdir='b1300/source/'))


#!!factory.addStep(steps.ShellCommand(command=["cp", "package/komodo/data/configs/gl-b1300.config", ".config"], workdir='b1300/source/'))

#!!factory.addStep(steps.ShellCommand(command=["make", "menuconfig"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["make"], workdir='b1300/source/'))
#!!factory.addStep(steps.ShellCommand(command=["./package/komodo/data/scripts/kbuild"], workdir='b1300/source/'))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["example-worker"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Komodo Builds"
c['titleURL'] = "https://github.com/openwrt/openwrt.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
