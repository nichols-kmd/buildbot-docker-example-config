# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.plugins import secrets, util

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

#make a directory for the build 
#clone the openWRT source into the directory
#clone the komodo.git into the source/package directory
#git checkout 4.x firmware
#link version file to source folder
#./scripts/feeds update -a
#./scripts/feeds install -a

factory = util.BuildFactory()
# creates base directory
factory.addStep(steps.ShellCommand(command=["mkdir", "b1300"]))
# check out openwrt
factory.addStep(steps.Git(repourl='https://github.com/openwrt/openwrt.git', mode='incremental', workdir='b1300/source'))
# clones down komodo files
#factory.addStep(steps.ShellCommand(command=["git", "remote", "set-url", "origin", "https://github.com/Komodowifi/komodo"]))
factory.addStep(steps.Git(repourl='git@github.com:Komodowifi/komodo.git', mode='incremental', workdir='b1300/source/package', sshHostKey='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCXU63nVNmPWrsdPsXeAZwZvN8LhesabFNIthhY1OhCbF2Gn/qf/GyLky/6gZKIjh+U0+lZTVw3Eo19LjbLhRVphZlaSTFOiabiA/N1bgsJNxgo/Ts1LzjGlv0utuT3vxetbXqZdjmGuXi0w7DAqNyUY/gu1IK+xafwIJfPCNUiSASnsTJ992j+IO55xlRh5JdRS00QPW/aUBNC3OdAgWZoQ5p0p5D/9TsR2CEcHLMpku5m+T/T8fwOd1k8fbxMRcaoD0+NOlWKm+rIPeXbItqM3HawJy7bahTpn44EcWYJ9GmS7h8L7HWEZpvaM0h6TykhX9egpyZuR0IXio9gLRvRmuYXc4+OEURzrCwo/WbLR9uRFmBk8sZiLUYr37h+2BIAnMlJ2zgU2ZlyGHkm27Lj2ax0PG3JVdg0PxC7CqdsYhtQQVwsBMG0OYCt/ZJqLtYTuseKLD8fJ6Grd5lIrjZQZ1et07A5lXQs5Oo4Gg02Wv/OnHKbogBw4fyKT9/jtZcevUU6o5l/0A++v3EbwIZk3KitWcrSiHMnhLN+tGZldy45eDGtFfGRwCvDM66E2uQc388UAo2j9TcjMXxQASzmxVs9FLp3i1VCCkyB77tDw+TJT003bdQy+Mc89omYzWaCr0nvevgw+j5gmKkackbBTvj5zoMt5IQr4k9M7+pk/Q== nichols@komodowifi.com', sshPrivateKey='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'))
#factory.addStep(steps.ShellCommand(command=["git", "clone", "git@github.com:Komodowifi/komodo.git"], workdir='b1300/source/package/komodo'))

# git checkout
factory.addStep(steps.ShellCommand(command=["git", "checkout", "4.x-firmware"], workdir='b1300/source/package/komodo'))
#create a link
factory.addStep(steps.ShellCommand(command=["ln", "-s", "package/komodo/data/scripts/version", "version"], workdir='b1300/source/package/komodo'))
#scripts things? i'm not sure what they do
factory.addStep(steps.ShellCommand(command=["./scripts/feeds", "update", "-a"]))
factory.addStep(steps.ShellCommand(command=["./scripts/feeds", "install", "-a"]))


#patch
factory.addStep(steps.ShellCommand(command=["patch", "-p1", "--dry-run", "<", "./package/komodo/data/patches/package-base-files.patch"]))
factory.addStep(steps.ShellCommand(command=["patch", "-p1", "<", "./package/komodo/data/patches/package-base-files.patch"]))





c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["example-worker"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Komodo Builds"
c['titleURL'] = "https://github.com/openwrt/openwrt.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
